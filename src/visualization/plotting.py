""" data visualization module. 다양한 type visualization create하 function들 provide. """ import os import logging import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import plotly.express as px import plotly.graph_objects as go from typing import Dict, List, Optional, Union, Any, Tuple from pathlib import Path logger = logging.getLogger(__name__) def create_correlation_heatmap( df: pd.DataFrame, columns: Optional[List[str]] = None, figsize: Tuple[int, int] = (10, 8), cmap: str = 'coolwarm', annot: bool = True, save_path: Optional[str] = None, **kwargs: Any ) -> Tuple[plt.Figure, plt.Axes]: """ 선택한 DataFrame columnsfor 상관관계 히트맵 create. Parameters ---------- df: pd.DataFrame 입력 DataFrame columns: list of str, optional 상관관계 rows렬 include할 columns. None인 case all number형 columns usage. figsize: tuple of int, default=(10, 8) 그림 size cmap: str, default='coolwarm' 히트맵 색상 맵 annot: bool, default=True 셀 상관관계 value 주석 표시 여부 save_path: str, optional 그림 save할 경. None면 그림 save되지 not. **kwargs: dict seaborn.heatmap 전달할 add 인number Returns ------- fig: plt.Figure Figure object ax: plt.Axes Axes object """ try: # columns 선택 if columns is None: # number형 columns만 선택 numeric_df = df.select_dtypes(include=['number']) else: numeric_df = df[columns] # 상관관계 rows렬 계산 corr_matrix = numeric_df.corr() # 그림 create fig, ax = plt.subplots(figsize=figsize) # 히트맵 create sns.heatmap( corr_matrix, annot=annot, cmap=cmap, ax=ax, **kwargs ) plt.title('상관관계 rows렬') plt.tight_layout() # 경 provide된 case 그림 save if save_path: # directory 없으면 create os.makedirs(os.path.dirname(save_path), exist_ok=True) plt.savefig(save_path, dpi=300, bbox_inches='tight') logger.info(f"상관관계 히트맵 save됨: {save_path}") return fig, ax except Exception as e: logger.error(f"상관관계 히트맵 create failed: {e}") raise def plot_feature_importance( feature_names: List[str], importance_values: List[float], title: str = '특성 중요도', figsize: Tuple[int, int] = (10, 6), color: str = '#1f77b4', save_path: Optional[str] = None ) -> Tuple[plt.Figure, plt.Axes]: """ 특성 중요도for number평 막대 graph create. Parameters ---------- feature_names: list of str 특성 name importance_values: list of float 특성 해당하 중요도 value title: str, default='특성 중요도' graph 제목 figsize: tuple of int, default=(10, 6) 그림 size color: str, default='#1f77b4' 막대 색상 save_path: str, optional 그림 save할 경. None면 그림 save되지 not. Returns ------- fig: plt.Figure Figure object ax: plt.Axes Axes object """ try: # 중요도 DataFrame create importance_df = pd.DataFrame({ 'Feature': feature_names, 'Importance': importance_values }) # 중요도별 정렬 importance_df = importance_df.sort_values('Importance', ascending=True) # 그림 create fig, ax = plt.subplots(figsize=figsize) # number평 막대 graph create ax.barh(importance_df['Feature'], importance_df['Importance'], color=color) # 제목and 레블 add ax.set_title(title) ax.set_xlabel('중요도') # 레아웃 조정 plt.tight_layout() # 경 provide된 case 그림 save if save_path: # directory 없으면 create os.makedirs(os.path.dirname(save_path), exist_ok=True) plt.savefig(save_path, dpi=300, bbox_inches='tight') logger.info(f"특성 중요도 graph save됨: {save_path}") return fig, ax except Exception as e: logger.error(f"특성 중요도 graph create failed: {e}") raise def create_time_series_plot( df: pd.DataFrame, date_column: str, value_columns: List[str], title: str = '시계columns data', figsize: Tuple[int, int] = (12, 6), color_palette: Optional[str] = None, save_path: Optional[str] = None, **kwargs: Any ) -> Tuple[plt.Figure, plt.Axes]: """ 시계columns datafor 선 graph create. Parameters ---------- df: pd.DataFrame 입력 DataFrame date_column: str date columns name value_columns: list of str graph 표시할 value columns 목록 title: str, default='시계columns data' graph 제목 figsize: tuple of int, default=(12, 6) 그림 size color_palette: str, optional 색상 팔레트 save_path: str, optional 그림 save할 경. None면 그림 save되지 not. **kwargs: dict pyplot.plot 전달할 add 인number Returns ------- fig: plt.Figure Figure object ax: plt.Axes Axes object """ try: # date data check 및 convert if df[date_column].dtype != 'datetime64[ns]': df = df.copy() df[date_column] = pd.to_datetime(df[date_column]) # date순 정렬 df = df.sort_values(date_column) # 그림 create fig, ax = plt.subplots(figsize=figsize) # 색상 팔레트 configuration if color_palette: colors = sns.color_palette(color_palette, len(value_columns)) else: colors = None # 각 value columnsfor 선 graph create for i, column in enumerate(value_columns): color = colors[i] if colors else None ax.plot( df[date_column], df[column], label=column, color=color, **kwargs ) # 제목and 레블 configuration ax.set_title(title) ax.set_xlabel('date') ax.set_ylabel('value') # x축 레블 rotation plt.xticks(rotation=45) # 범례 표시 ax.legend() # 레아웃 조정 plt.tight_layout() # 경 provide된 case 그림 save if save_path: # directory 없으면 create os.makedirs(os.path.dirname(save_path), exist_ok=True) plt.savefig(save_path, dpi=300, bbox_inches='tight') logger.info(f"시계columns graph save됨: {save_path}") return fig, ax except Exception as e: logger.error(f"시계columns graph create failed: {e}") raise def create_scatter_plot( df: pd.DataFrame, x_column: str, y_column: str, color_column: Optional[str] = None, size_column: Optional[str] = None, title: str = '산점도', figsize: Tuple[int, int] = (10, 6), add_trendline: bool = False, save_path: Optional[str] = None ) -> Tuple[plt.Figure, plt.Axes]: """ 두 변number 간 관계 보여주 산점도 create. Parameters ---------- df: pd.DataFrame 입력 DataFrame x_column: str x축 columns name y_column: str y축 columns name color_column: str, optional 점 색상 usage할 columns name size_column: str, optional 점 size usage할 columns name title: str, default='산점도' graph 제목 figsize: tuple of int, default=(10, 6) 그림 size add_trendline: bool, default=False 추세선 add 여부 save_path: str, optional 그림 save할 경. None면 그림 save되지 not. Returns ------- fig: plt.Figure Figure object ax: plt.Axes Axes object """ try: # 그림 create fig, ax = plt.subplots(figsize=figsize) # size columns 있 case if size_column: sizes = df[size_column] / df[size_column].max() * 200 + 20 else: sizes = 60 # 색상 columns 있 case if color_column: scatter = ax.scatter( df[x_column], df[y_column], c=df[color_column], s=sizes, alpha=0.6, cmap='viridis' ) plt.colorbar(scatter, ax=ax, label=color_column) else: ax.scatter( df[x_column], df[y_column], s=sizes, alpha=0.6, color='steelblue' ) # 추세선 add if add_trendline: # number형 data만 usage mask = pd.notna(df[x_column]) & pd.notna(df[y_column]) x = df.loc[mask, x_column] y = df.loc[mask, y_column] # 선형 추세선 계산 z = np.polyfit(x, y, 1) p = np.poly1d(z) # 추세선 그리기 ax.plot(x, p(x), "r--", alpha=0.8, label=f"추세선: y={z[0]:.4f}x+{z[1]:.4f}") ax.legend() # 제목and 레블 configuration ax.set_title(title) ax.set_xlabel(x_column) ax.set_ylabel(y_column) # 레아웃 조정 plt.tight_layout() # 경 provide된 case 그림 save if save_path: # directory 없으면 create os.makedirs(os.path.dirname(save_path), exist_ok=True) plt.savefig(save_path, dpi=300, bbox_inches='tight') logger.info(f"산점도 save됨: {save_path}") return fig, ax except Exception as e: logger.error(f"산점도 create failed: {e}") raise def create_bar_chart( df: pd.DataFrame, category_column: str, value_column: str, title: str = '막대 graph', figsize: Tuple[int, int] = (10, 6), color: Optional[str] = None, orientation: str = 'vertical', top_n: Optional[int] = None, save_path: Optional[str] = None ) -> Tuple[plt.Figure, plt.Axes]: """ 범주형 datafor 막대 graph create. Parameters ---------- df: pd.DataFrame 입력 DataFrame category_column: str 범주 columns name value_column: str value columns name title: str, default='막대 graph' graph 제목 figsize: tuple of int, default=(10, 6) 그림 size color: str, optional 막대 색상 orientation: str, default='vertical' graph 방향 ('vertical' or 'horizontal') top_n: int, optional 표시할 상위 항목 number. None면 all 항목 표시. save_path: str, optional 그림 save할 경. None면 그림 save되지 not. Returns ------- fig: plt.Figure Figure object ax: plt.Axes Axes object """ try: # data 준비 plot_data = df.groupby(category_column)[value_column].sum().reset_index() # value 기준 정렬 plot_data = plot_data.sort_values(value_column, ascending=False) # 상위 N개 항목만 표시 if top_n: plot_data = plot_data.head(top_n) # 그림 create fig, ax = plt.subplots(figsize=figsize) # 막대 graph create if orientation == 'vertical': if color: ax.bar(plot_data[category_column], plot_data[value_column], color=color) else: ax.bar(plot_data[category_column], plot_data[value_column]) # x축 레블 rotation plt.xticks(rotation=45, ha='right') # 축 레블 configuration ax.set_xlabel(category_column) ax.set_ylabel(value_column) else: # horizontal if color: ax.barh(plot_data[category_column], plot_data[value_column], color=color) else: ax.barh(plot_data[category_column], plot_data[value_column]) # 축 레블 configuration ax.set_xlabel(value_column) ax.set_ylabel(category_column) # 제목 configuration ax.set_title(title) # 레아웃 조정 plt.tight_layout() # 경 provide된 case 그림 save if save_path: # directory 없으면 create os.makedirs(os.path.dirname(save_path), exist_ok=True) plt.savefig(save_path, dpi=300, bbox_inches='tight') logger.info(f"막대 graph save됨: {save_path}") return fig, ax except Exception as e: logger.error(f"막대 graph create failed: {e}") raise def create_pie_chart( df: pd.DataFrame, category_column: str, value_column: str, title: str = '원형 graph', figsize: Tuple[int, int] = (8, 8), colors: Optional[List[str]] = None, explode: Optional[List[float]] = None, show_values: bool = True, show_labels: bool = True, save_path: Optional[str] = None ) -> Tuple[plt.Figure, plt.Axes]: """ 범주형 datafor 원형 graph create. Parameters ---------- df: pd.DataFrame 입력 DataFrame category_column: str 범주 columns name value_column: str value columns name title: str, default='원형 graph' graph 제목 figsize: tuple of int, default=(8, 8) 그림 size colors: list of str, optional 각 섹션 색상 목록 explode: list of float, optional 각 섹션 중심from 떨어지 정도 show_values: bool, default=True value 표시 여부 show_labels: bool, default=True 레블 표시 여부 save_path: str, optional 그림 save할 경. None면 그림 save되지 not. Returns ------- fig: plt.Figure Figure object ax: plt.Axes Axes object """ try: # data 준비 plot_data = df.groupby(category_column)[value_column].sum().reset_index() # value 기준 정렬 plot_data = plot_data.sort_values(value_column, ascending=False) # 레블and value 추출 labels = plot_data[category_column] if show_labels else None values = plot_data[value_column] # 그림 create fig, ax = plt.subplots(figsize=figsize) # 원형 graph create wedges, texts, autotexts = ax.pie( values, labels=labels, explode=explode, colors=colors, autopct='%1.1f%%' if show_values else None, shadow=False, startangle=90 ) # 텍스트 속성 configuration if show_values: for autotext in autotexts: autotext.set_color('white') autotext.set_fontsize(10) # 제목 configuration ax.set_title(title) # 축 비율 균등하게 configuration ax.axis('equal') # 경 provide된 case 그림 save if save_path: # directory 없으면 create os.makedirs(os.path.dirname(save_path), exist_ok=True) plt.savefig(save_path, dpi=300, bbox_inches='tight') logger.info(f"원형 graph save됨: {save_path}") return fig, ax except Exception as e: logger.error(f"원형 graph create failed: {e}") raise def create_interactive_plot( df: pd.DataFrame, plot_type: str, x: Optional[str] = None, y: Optional[Union[str, List[str]]] = None, color: Optional[str] = None, size: Optional[str] = None, title: str = '인터랙티브 graph', **kwargs: Any ) -> Union[px.Figure, go.Figure]: """ plotly usage하여 인터랙티브 graph create. Parameters ---------- df: pd.DataFrame 입력 DataFrame plot_type: str graph type ('line', 'bar', 'scatter', 'pie', 'box', 'heatmap') x: str, optional x축 columns name y: str or list of str, optional y축 columns name or columns name 목록 color: str, optional 색상 usage할 columns name size: str, optional size usage할 columns name (산점도만 apply) title: str, default='인터랙티브 graph' graph 제목 **kwargs: dict plotly function 전달할 add 인number Returns ------- fig: Union[px.Figure, go.Figure] plotly 그림 object """ try: if plot_type == 'line': fig = px.line( df, x=x, y=y, color=color, title=title, **kwargs ) elif plot_type == 'bar': fig = px.bar( df, x=x, y=y, color=color, title=title, **kwargs ) elif plot_type == 'scatter': fig = px.scatter( df, x=x, y=y, color=color, size=size, title=title, **kwargs ) elif plot_type == 'pie': fig = px.pie( df, names=x, values=y, title=title, **kwargs ) elif plot_type == 'box': fig = px.box( df, x=x, y=y, color=color, title=title, **kwargs ) elif plot_type == 'heatmap': # 히트맵 피벗 table나 상관관계 rows렬 needed if 'z' not in kwargs: pivot_data = df.pivot(index=x, columns=color, values=y) fig = px.imshow( pivot_data, title=title, **kwargs ) else: fig = px.imshow( x=x, y=y, z=kwargs.pop('z'), title=title, **kwargs ) else: raise ValueError(f"unsupported not graph type: {plot_type}") # 레아웃 update fig.update_layout( template='plotly_white', title={ 'text': title, 'y': 0.95, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top' } ) return fig except Exception as e: logger.error(f"인터랙티브 graph create failed: {e}") raise def save_plot_to_html( fig: Union[px.Figure, go.Figure], output_path: str, include_plotlyjs: bool = True, full_html: bool = True ) -> str: """ plotly graph HTML file save. Parameters ---------- fig: px.Figure or go.Figure save할 plotly 그림 object output_path: str output file 경 include_plotlyjs: bool, default=True plotly.js HTML include할지 여부 full_html: bool, default=True 완전한 HTML 문서 create 여부 Returns ------- str save된 file 경 """ try: # directory 없으면 create os.makedirs(os.path.dirname(output_path), exist_ok=True) # HTML save fig.write_html( output_path, include_plotlyjs=include_plotlyjs, full_html=full_html ) logger.info(f"graph HTML save됨: {output_path}") return output_path except Exception as e: logger.error(f"graph HTML save failed: {e}") raise # usage example if __name__ == "__main__": # 깅 configuration logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) # 테스트 data create np.random.seed(42) dates = pd.date_range(start='2024-01-01', periods=30) data = { 'date': dates, 'impressions': np.random.randint(1000, 5000, len(dates)), 'clicks': np.random.randint(50, 500, len(dates)), 'conversions': np.random.randint(1, 50, len(dates)), 'cost': np.random.uniform(100, 1000, len(dates)), } # CTR 및 기타 파생 지표 계산 data['ctr'] = [clicks / impressions * 100 for clicks, impressions in zip(data['clicks'], data['impressions'])] data['cpc'] = [cost / clicks if clicks > 0 else 0 for cost, clicks in zip(data['cost'], data['clicks'])] data['conversion_rate'] = [conversions / clicks * 100 if clicks > 0 else 0 for conversions, clicks in zip(data['conversions'], data['clicks'])] # source add sources = ['Google Ads', 'Meta Ads', 'Naver Ads'] data['source'] = np.random.choice(sources, len(dates)) # DataFrame create df = pd.DataFrame(data) # output directory create os.makedirs('data/output', exist_ok=True) # 1. 상관관계 히트맵 fig1, ax1 = create_correlation_heatmap( df, columns=['impressions', 'clicks', 'conversions', 'cost', 'ctr', 'cpc', 'conversion_rate'], save_path='data/output/correlation_heatmap.png' ) # 2. 시계columns graph fig2, ax2 = create_time_series_plot( df, date_column='date', value_columns=['clicks', 'conversions'], title='클릭 및 전환 추', save_path='data/output/time_series.png' ) # 3. 산점도 fig3, ax3 = create_scatter_plot( df, x_column='cost', y_column='conversions', size_column='clicks', color_column='ctr', title='비용 vs 전환 (size: 클릭 number, 색상: CTR)', add_trendline=True, save_path='data/output/scatter_plot.png' ) # 4. source별 비교 막대 graph source_data = df.groupby('source')[['impressions', 'clicks', 'conversions', 'cost']].sum().reset_index() fig4, ax4 = create_bar_chart( source_data, category_column='source', value_column='conversions', title='source별 전환 number', save_path='data/output/bar_chart.png' ) # 5. 인터랙티브 graph fig5 = create_interactive_plot( df, plot_type='line', x='date', y=['clicks', 'conversions'], color='source', title='source별 성and 추' ) save_plot_to_html(fig5, 'data/output/interactive_plot.html') print("all graph create되었습니다. 'data/output' directory check하세요.")