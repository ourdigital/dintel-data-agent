""" Google Analytics data collection connector. Supports GoogleAnalytics4 (GA4). """ import os import json import logging from typing import Dict, List, Optional, Union, Any import pandas as pd from datetime import datetime, timedelta import yaml # Google API client library from google.analytics.data_v1beta import BetaAnalyticsDataClient from google.analytics.data_v1beta.types import ( DateRange, Dimension, Metric, RunReportRequest, ) from google.oauth2.service_account import Credentials from google.oauth2 import service_account logger = logging.getLogger(__name__) class GoogleAnalyticsConnector: """Connector class for collecting Google Analytics data.""" def __init__(self, credentials_path: str = "config/api_credentials.yaml", config_path: str = "config/pipeline_config.yaml"): """ Initialize GoogleAnalyticsConnector. Parameters ---------- credentials_path: str API credentials file path config_path: str Pipeline configuration file path """ self.credentials_path = credentials_path self.config_path = config_path self.credentials = self._load_credentials() self.config = self._load_config() self.client = None def _load_credentials(self) -> Dict[str, Any]: """ Load API credentials. Returns ------- Dict[str, Any] authentication information containing dictionary """ try: with open(self.credentials_path, 'r', encoding='utf-8') as f: credentials = yaml.safe_load(f) return credentials except Exception as e: logger.error(f"authentication information file load failed: {e}") raise def _load_config(self) -> Dict[str, Any]: """ 파프라인 configuration load. Returns ------- Dict[str, Any] dictionary containing configuration information """ try: with open(self.config_path, 'r', encoding='utf-8') as f: config = yaml.safe_load(f) return config except Exception as e: logger.error(f"configuration file load failed: {e}") raise def _initialize_client(self) -> None: """Google Analytics Data API 클라언트 initialize.""" try: # service account usage method service_account_file = self.credentials['google'].get('service_account_file') if service_account_file and os.path.exists(service_account_file): credentials = service_account.Credentials.from_service_account_file( service_account_file, scopes=["https://www.googleapis.com/auth/analytics.readonly"] ) self.client = BetaAnalyticsDataClient(credentials=credentials) logger.info("GA4 API 클라언트 initialized successfully (service account usage)") else: # service account file no case another authentication method usage하거나 러 process logger.warning("service account file none or invalid not") raise ValueError("Google Analytics API authentication needed한 service account file not available.") except Exception as e: logger.error(f"GA4 API 클라언트 initialization failed: {e}") raise def _get_date_range(self) -> tuple: """ configurationfrom date range get. Returns ------- tuple (start date, close date) format 튜플 (YYYY-MM-DD string) """ date_range = self.config['collection']['default_date_range'] today = datetime.now().date() if date_range == "last_7_days": start_date = (today - timedelta(days=7)).strftime('%Y-%m-%d') end_date = today.strftime('%Y-%m-%d') elif date_range == "last_30_days": start_date = (today - timedelta(days=30)).strftime('%Y-%m-%d') end_date = today.strftime('%Y-%m-%d') elif date_range == "last_90_days": start_date = (today - timedelta(days=90)).strftime('%Y-%m-%d') end_date = today.strftime('%Y-%m-%d') elif date_range == "custom": custom_range = self.config['collection']['custom_date_range'] start_date = custom_range['start_date'] end_date = custom_range['end_date'] else: # default value: last 30days start_date = (today - timedelta(days=30)).strftime('%Y-%m-%d') end_date = today.strftime('%Y-%m-%d') logger.info(f"date range configuration: {start_date} ~ {end_date}") return start_date, end_date def fetch_data(self) -> pd.DataFrame: """ Google Analytics data get. Returns ------- pd.DataFrame GA data containing DataFrame """ if not self.client: self._initialize_client() ga_config = self.config['collection']['sources']['google_analytics'] if not ga_config['enabled']: logger.info("Google Analytics data collection disabled.") return pd.DataFrame() try: property_id = self.credentials['google_analytics']['property_id'] metrics = ga_config['metrics'] dimensions = ga_config['dimensions'] start_date, end_date = self._get_date_range() # RunReportRequest object create request = RunReportRequest( property=f"properties/{property_id}", date_ranges=[DateRange(start_date=start_date, end_date=end_date)], metrics=[Metric(name=m) for m in metrics], dimensions=[Dimension(name=d) for d in dimensions], ) # report execute response = self.client.run_report(request) logger.info(f"GA4 data get success, rows number: {len(response.rows)}") # response process return self._process_response(response, metrics, dimensions) except Exception as e: logger.error(f"GA4 data get failed: {e}") raise def _process_response(self, response, metrics: List[str], dimensions: List[str]) -> pd.DataFrame: """ GA4 API response DataFrame convert. Parameters ---------- response: RunReportResponse GA4 API response metrics: List[str] 요청한 지표 목록 dimensions: List[str] 요청한 차원 목록 Returns ------- pd.DataFrame convert된 DataFrame """ rows_data = [] for row in response.rows: row_data = {} # 차원 value 추출 for i, dimension in enumerate(row.dimension_values): row_data[dimensions[i]] = dimension.value # 지표 value 추출 for i, metric in enumerate(row.metric_values): row_data[metrics[i]] = metric.value rows_data.append(row_data) # DataFrame create df = pd.DataFrame(rows_data) # data type convert for metric in metrics: if metric in df: try: # number 지표 float convert df[metric] = pd.to_numeric(df[metric]) except: # convert number no case string maintain pass # date columns 있으면 datetime convert if 'date' in df.columns: df['date'] = pd.to_datetime(df['date'], format='%Y%m%d') logger.debug(f"GA4 response process completed, DataFrame size: {df.shape}") return df def save_to_csv(self, df: pd.DataFrame, output_path: str = "data/raw/google_analytics/") -> str: """ DataFrame CSV file save. Parameters ---------- df: pd.DataFrame save할 DataFrame output_path: str output directory 경 Returns ------- str save된 file 경 """ if df.empty: logger.warning("save할 data not available.") return "" # directory 없으면 create os.makedirs(output_path, exist_ok=True) # current date file명 add current_date = datetime.now().strftime("%Y%m%d") file_path = os.path.join(output_path, f"ga_data_{current_date}.csv") # CSV save df.to_csv(file_path, index=False) logger.info(f"GA data CSV save completed: {file_path}") return file_path # usage example if __name__ == "__main__": # 깅 configuration logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) # GA connector create ga_connector = GoogleAnalyticsConnector() try: # data get df = ga_connector.fetch_data() # result output if not df.empty: print("\ndata preview:") print(df.head()) print(f"\ndata size: {df.shape}") # CSV save file_path = ga_connector.save_to_csv(df) if file_path: print(f"\nCSV file save location: {file_path}") else: print("data none or GA data collection disabled.") except Exception as e: print(f"error occurred: {e}")